# Amplify GraphQL Transformer v1
# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/auth
# input AMPLIFY {
#  globalAuthRule: AuthRule = { allow: public }
#}

type Organization @model @auth(rules: [{ allow: private }]) {
  id: ID!
  organizationName: String!
  organizationShortName: String
}

type School @model @auth(rules: [{ allow: private }]) {
  id: ID!
  schoolName: String!
  schoolShortName: String
  location: String
}

type Course @model @auth(rules: [{ allow: private }]) {
  id: ID!
  courseName: String!
  courseShortName: String
  location: String
}

type Module @model @auth(rules: [{ allow: private }]) {
  id: ID!
  moduleName: String!
  moduleShortName: String!
  moduleInfo: [moduleInfo] @hasMany
}

type ModuleTest @model @auth(rules: [{ allow: private }]) {
  id: ID!
  studentID: ID! @index(name: "byStudent")
  instructorID: ID! @index(name: "byInstructor")
  instructor: Instructor! @belongsTo(fields: ["id"])
  moduleInfoID: ID! @index(name: "byModuleInfo")
  # moduleInfo: moduleInfo! @belongsTo(fields: ["id"])
  testGrade: Int
  testDate: AWSDateTime
  testType: String
  testEvent: String
  retestRaw: Int
  useForGPA: Boolean
  status: String
}

type Class @model @auth(rules: [{ allow: private }]) {
  id: ID!
  className: String!
  shiftPeriod: String
  classConveneDate: AWSDateTime
  classProjectedDate: AWSDateTime
  building: String
  room: String
  location: String
  status: String
  graduated: Boolean
  offsiteClass: Boolean
  classAdvisor: String
  instructors: [ClassInfo] @hasMany(indexName: "byClass", fields: ["id"])
  student: [Student] @hasMany
  moduleInfo: [moduleInfo] @hasMany
}

type ClassInfo @model @auth(rules: [{ allow: private }]) {
  id: ID!
  classID: ID! @index(name: "byClass", sortKeyFields: ["instructorID"])
  instructorID: ID! @index(name: "byInstructor", sortKeyFields: ["classID"])
  class: Class! @belongsTo(fields: ["classID"])
  instructor: Instructor! @belongsTo(fields: ["instructorID"])
}

type Instructor @model @auth(rules: [{ allow: private }]) {
  id: ID!
  instructorFirstName: String
  instructorLastName: String
  instructorUsername: String
  role: String
  status: String
  classes: [ClassInfo] @hasMany(indexName: "byInstructor", fields: ["id"])
  moduleTest: [ModuleTest] @hasMany(indexName: "byInstructor", fields: ["id"])
  moduleInfo: [moduleInfo] @hasMany
}

type Student @model @auth(rules: [{ allow: private }]) {
  id: ID!
  studentUsername: String
  studentFirstName: String
  studentLastName: String
  status: String
  course: String
  school: String
  organization: String
  rateRank: String
  newAssession: Boolean
  mandotoryStudy: Boolean
  gpaw: Int
  arbPending: Boolean
  currentClass: Class! @belongsTo(fields: ["id"])
  setbackHistory: [SetbackHistory]
    @hasMany(indexName: "byStudent", fields: ["id"])
  comments: [Comments] @hasMany(indexName: "byStudent", fields: ["id"])
  moduleInfo: [moduleInfo] @hasMany(indexName: "byStudent", fields: ["id"])
}

type moduleInfo @model @auth(rules: [{ allow: private }]) {
  id: ID!
  studentID: ID! @index(name: "byStudent")
  status: String
  module: Module! @belongsTo
  class: Class! @belongsTo #(fields: ["id"])
  instructor: Instructor! @belongsTo #(fields: ["id"])
  moduleTest: [ModuleTest] @hasMany(indexName: "byModuleInfo", fields: ["id"])
}

type SetbackHistory @model @auth(rules: [{ allow: private }]) {
  id: ID!
  studentID: ID! @index(name: "byStudent", sortKeyFields: ["setbackDate"])
  setbackDate: AWSDateTime
  setbackFromClass: String
  placedIntoClass: String
  setbackReason: String
}

type Comments @model @auth(rules: [{ allow: private }]) {
  id: ID!
  studentID: ID! @index(name: "byStudent", sortKeyFields: ["commentDate"])
  comment: String
  commentDate: AWSDateTime
}
